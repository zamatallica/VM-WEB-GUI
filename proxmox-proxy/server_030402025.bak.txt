
// PROJECT NOTES: By default, Node.js does not use the Windows Trusted Root CA store. 
// If your Proxmox server uses a self-signed certificate or a certificate from its own CA, 
// Node.js does not trust it unless you explicitly provide the CA certificate.
// Setting NODE_EXTRA_CA_CERTS makes sure Node.js trusts Proxmox's internal CA, 
// allowing secure WebSocket (wss://) connections without SSL errors. To make this trust permanent, 
// add the variable to your Windows system environment variables:
// Open Run (Win + R) → Type sysdm.cpl → Press Enter.
// Go to Advanced → Click Environment Variables.
// Under System Variables, click New.
// Variable Name: NODE_EXTRA_CA_CERTS
// Variable Value: C:\certs\Certbot\proxmoxcerts\pve-root-ca.pem


import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { createProxyMiddleware } from 'http-proxy-middleware';
import axios from 'axios';
import https from 'https';
import http from 'http';
import { securityHeaders, apiLimiter } from './security.js';
import { WebSocketServer, WebSocket } from 'ws';


// Load custom CA certificate (if provided)
let customCert = null;
const certPath = process.env.PROXMOX_CA_CERT_PATH || path.join(__dirname, 'pve-root-ca.pem');

if (fs.existsSync(certPath)) {
  console.log(` Using custom Proxmox CA certificate from: ${certPath}`);
  customCert = fs.readFileSync(certPath);
}

// Create HTTPS agent with better certificate handling
const agent = new https.Agent({
  rejectUnauthorized: customCert ? true : false, // Reject invalid certs only if custom CA is loaded
  ca: customCert || undefined
});

async function verifyProxmoxConnection() {
  console.log("******* Server Start :", new Date().toISOString(), " **********");
  console.log("DEBUG: ENV Variables Loaded:");
  console.log("PROXMOX_API_BASE:", process.env.PROXMOX_API_BASE);
  console.log("PROXMOX_NODE:", process.env.PROXMOX_NODE);
  console.log("PROXMOX_API_USER:", process.env.PROXMOX_API_USER);
  console.log("PROXMOX_API_TOKEN:", process.env.PROXMOX_API_TOKEN ? "Loaded" : "Not Set");

  if (!process.env.PROXMOX_API_BASE || !process.env.PROXMOX_NODE || !process.env.PROXMOX_API_TOKEN) {
    console.error(" Missing required environment variables!");
    process.exit(1);
  }

  try {
    const response = await axios.post(
      `https://${process.env.PROXMOX_API_BASE}/nodes/${process.env.PROXMOX_NODE}/qemu/104/vncproxy`,
      {'generate-password': 1, websocket: 1 }, // Added required payload}
      {
        httpsAgent: agent,
        headers: {
          Authorization: `PVEAPIToken=${process.env.PROXMOX_API_USER}!${process.env.PROXMOX_API_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log(' Proxmox connection verified:', response.data.data);
  } catch (error) {
    console.error(' Proxmox connection failed:', error.response?.data || error.message);
    console.error(' SSL Debug:', error.cause);
    process.exit(1);
  }
}

const app = express();
// Security Middleware
app.use(express.json());
app.use(cors({
  origin: process.env.FRONTEND_URL,
  credentials: true
}));
app.use(securityHeaders);
app.use('/api', apiLimiter);
// Trust proxies (needed when using Nginx as a reverse proxy)
app.set('trust proxy', 1);  // The '1' means trust the first proxy


/*/ WebSocket Proxy Middleware
app.use('/proxmox-ws', createProxyMiddleware({
  target: `wss://${process.env.PROXMOX_HOST}`, // Proxmox API Base
  changeOrigin: true,
  ws: true,
  secure: false, // Ignore self-signed SSL certs
  logLevel: 'debug',

  pathRewrite: (path, req) => {
      console.log(" Incoming WebSocket Request:", req.url);
      console.log(" Query Params:", req.query);

      const { port, vncticket, vmId } = req.query;

      if (!port || !vncticket || !vmId) {
          console.error(" Missing WebSocket parameters:", { port, vncticket, vmId});
          throw new Error("Missing required WebSocket parameters");  // Prevents invalid connections
      }

      const rewrittenPath = `/api2/json/nodes/${process.env.PROXMOX_NODE}/qemu/${vmId}/vncwebsocket?port=${port}&vncticket=${encodeURIComponent(vncticket)}`;
      console.log(` Rewriting WebSocket path to: ${rewrittenPath}`);
      return rewrittenPath;
  },

  onProxyReqWs: (proxyReq, req, socket, head) => {
      console.log(" Forwarding WebSocket request to Proxmox...");
      console.log(` Target: ${process.env.PROXMOX_HOST}`);
      console.log(` Path: ${req.url}`);

       //Preserve the original Host header
       proxyReq.setHeader('Host', req.headers.host);
      
        // WebSocket upgrade headers
        proxyReq.setHeader('Connection', 'Upgrade');
        proxyReq.setHeader('Upgrade', 'websocket');

        // Add Proxmox API Authorization Header
        const authToken = `PVEAPIToken=${process.env.PROXMOX_API_USER}!${process.env.PROXMOX_API_TOKEN}`;
        proxyReq.setHeader('Authorization', authToken);

      console.log(" WebSocket Headers:", proxyReq.getHeaders());

  },
  onError: (err, _req, res) => {
      console.error(' WebSocket Proxy Error:', err);
      if (res && res.writeHead) {
          res.writeHead(500, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ error: 'WebSocket Proxy Failed', details: err.message }));
      }
  }
}));*/

// Create an HTTP server
const server = http.createServer();

// Create a WebSocket server
const wss = new WebSocketServer({ noServer: true });

// Handle WebSocket connections
wss.on('connection', (ws, request) => {
    console.log('WebSocket connection established');

    // Forward messages to Proxmox
    ws.on('message', (message) => {
        console.log('Received:', message);
        // Forward the message to Proxmox (if needed)
    });

    // Handle WebSocket close
    ws.on('close', () => {
        console.log('WebSocket connection closed');
    });
});

// Handle HTTP upgrade requests
server.on('upgrade', (request, socket, head) => {
  if (request.url === '/proxmox-ws') {
      // Extract query parameters
      const urlParams = new URLSearchParams(request.url.split('?')[1]);
      const port = urlParams.get('port');
      const vncticket = urlParams.get('vncticket');
      const vmId = urlParams.get('vmId');

      if (!port || !vncticket || !vmId) {
          console.error('Missing required WebSocket parameters');
          socket.destroy();
          return;
      }

      // Construct the Proxmox WebSocket URL
      const proxmoxWsUrl = `wss://${process.env.PROXMOX_HOST}/api2/json/nodes/${process.env.PROXMOX_NODE}/qemu/${vmId}/vncwebsocket?port=${port}&vncticket=${vncticket}`;

      // Create a WebSocket connection to Proxmox
      const proxmoxWs = new WebSocket(proxmoxWsUrl, {
          headers: {
              Authorization: `PVEAPIToken=${process.env.PROXMOX_API_USER}!${process.env.PROXMOX_API_TOKEN}`,
          },
      });

      proxmoxWs.on('open', () => {
          console.log('Connected to Proxmox WebSocket');

          // Handle the client WebSocket upgrade
          wss.handleUpgrade(request, socket, head, (ws) => {
              wss.emit('connection', ws, request);
          });

          // Pipe data between client and Proxmox
          proxmoxWs.on('message', (data) => {
              ws.send(data);
          });

          ws.on('message', (data) => {
              proxmoxWs.send(data);
          });
      });

      proxmoxWs.on('error', (err) => {
          console.error('Proxmox WebSocket error:', err);
          socket.destroy();
      });

      proxmoxWs.on('close', () => {
          console.log('Proxmox WebSocket connection closed');
          ws.close();
      });
  } else {
      socket.destroy();
  }
});



// VNC Ticket Endpoint
app.get('/api/proxmox/vnc-ticket', async (req, res) => {
  try {
    const { vmId } = req.query;
    
    if (!vmId || !/^\d+$/.test(vmId)) {
      return res.status(400).json({ error: 'Invalid VM ID' });
    }

    const response = await axios.post(
      `https://${process.env.PROXMOX_API_BASE}/nodes/${process.env.PROXMOX_NODE}/qemu/${vmId}/vncproxy`, 
      {'generate-password': 1, websocket: 1 }, // Added required payload}
      {
        httpsAgent: agent,
        headers: {
          Authorization: `PVEAPIToken=${process.env.PROXMOX_API_USER}!${process.env.PROXMOX_API_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );    
    
    console.log('Proxmox VNC Ticket:', response.data.data);
    console.log('URI encoded Ticket:',  encodeURIComponent(response.data.data.ticket));

    res.json({
      ticket: encodeURIComponent(response.data.data.ticket),
      port: response.data.data.port,
      password: response.data.data.password
    });

  } catch (error) {
    console.error(' Proxy Error:', error.response?.data || error.message);
    res.status(500).json({ 
      error: 'Failed to get VNC ticket',
      details: error.response?.data?.errors || error.message
    });
  }
});

// Start the server only after verifying Proxmox connection
const PORT = process.env.PROXY_PORT || 3001;
verifyProxmoxConnection().then(() => {
  app.listen(PORT, '0.0.0.0', () => {
      console.log(` Proxmox proxy service running on port ${PORT}`);
  });
});
